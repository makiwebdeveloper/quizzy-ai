generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @map("user_id")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  takes          Take[]
  answers        Answer[]
  createdQuizzes Quiz[]
}

model Quiz {
  id       String  @id @default(cuid())
  topic    String
  isPublic Boolean @default(false)

  creatorId String @map("creator_id")

  questions Question[]
  takes     Take[]

  creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}

model Take {
  startsAt DateTime  @default(now())
  endsAt   DateTime?

  quizId   String   @map("quiz_id")
  playerId String   @map("player_id")
  answers  Answer[]

  quiz   Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  player User @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@id([quizId, playerId])
}

model Question {
  id   String @id @default(cuid())
  text String

  quizId  String   @map("quiz_id")
  options Option[]

  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model Option {
  id        String  @id @default(cuid())
  text      String
  isCorrect Boolean @default(false) @map("is_correct")

  questionId String   @map("question_id")
  answers    Answer[]

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Answer {
  id        String  @id @default(cuid())
  isCorrect Boolean

  playerId     String @map("player_id")
  optionId     String @map("option_id")
  takeQuizId   String @map("take_quiz_id")
  takePlayerId String @map("take_player_id")

  player User   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  option Option @relation(fields: [optionId], references: [id], onDelete: Cascade)
  take   Take   @relation(fields: [takeQuizId, takePlayerId], references: [quizId, playerId], onDelete: Cascade)
}
